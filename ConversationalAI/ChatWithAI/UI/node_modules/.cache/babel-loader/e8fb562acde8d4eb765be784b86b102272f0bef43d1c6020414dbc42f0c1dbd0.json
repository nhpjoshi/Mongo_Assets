{"ast":null,"code":"var _jsxFileName = \"/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/component/PromptInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TextInput from \"./TextInput\";\nimport TextArea from \"./TextArea\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PromptInput() {\n  _s();\n  const [question, setQuestion] = useState(\"\");\n  const [conversation, setConversation] = useState(\"\");\n  const [ws, setWs] = useState(null);\n  const [isTyping, setIsTyping] = useState(false); // Track if AI is typing\n  const [aiResponse, setAiResponse] = useState(\"\"); // Track AI response being typed\n  // const Spinner = () => <div className=\"spinner\"></div>;\n\n  const ThinkingAnimation = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thinking\",\n    children: [\"Llama is thinking\", /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"dot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:4000\");\n    setWs(socket);\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.response) {\n        displayResponseLetterByLetter(data.response);\n      } else {\n        console.error(\"Unexpected response format:\", data);\n      }\n    };\n    return () => {\n      socket.close();\n    };\n  }, []);\n  const handleInputChange = e => {\n    setQuestion(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (question.trim() === \"\" || !ws) return;\n    setConversation(prev => `${prev}\\nYou: ${question}`);\n    setAiResponse(\"\");\n    setIsTyping(true); // Start spinner\n\n    const message = {\n      model: \"llama3:8b\",\n      prompt: conversation + `\\nYou: ${question}`,\n      stream: false\n    };\n    ws.send(JSON.stringify(message));\n    setQuestion(\"\"); // Clear input after sending\n  };\n  const displayResponseLetterByLetter = response => {\n    setIsTyping(true); // Keep spinner active while typing effect is ongoing\n    let currentText = \"\";\n    const delay = 20;\n    response.split(\"\").forEach((char, index) => {\n      setTimeout(() => {\n        currentText += char;\n        setAiResponse(currentText);\n        if (index === response.length - 1) {\n          setIsTyping(false); // Stop spinner when response is complete\n          setConversation(prev => `${prev}\\nLlama: ${currentText}`);\n          setAiResponse(\"\");\n        }\n      }, index * delay);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Alsurance - Own Your Prompts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n      value: `${conversation}${isTyping ? `\\nLlama: ${aiResponse}` : \"\"}`,\n      placeholder: \"The AI response will appear here.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), isTyping && /*#__PURE__*/_jsxDEV(ThinkingAnimation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 20\n    }, this), \" \", /*#__PURE__*/_jsxDEV(TextInput, {\n      value: question,\n      onChange: handleInputChange,\n      onEnter: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(PromptInput, \"iOFivzJWZGhk1CVHniEXJdJAzJ4=\");\n_c = PromptInput;\nexport default PromptInput;\nvar _c;\n$RefreshReg$(_c, \"PromptInput\");","map":{"version":3,"names":["React","useState","useEffect","TextInput","TextArea","Button","jsxDEV","_jsxDEV","PromptInput","_s","question","setQuestion","conversation","setConversation","ws","setWs","isTyping","setIsTyping","aiResponse","setAiResponse","ThinkingAnimation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","socket","WebSocket","onmessage","event","data","JSON","parse","response","displayResponseLetterByLetter","console","error","close","handleInputChange","e","target","value","handleSendMessage","trim","prev","message","model","prompt","stream","send","stringify","currentText","delay","split","forEach","char","index","setTimeout","length","style","textAlign","marginTop","placeholder","onChange","onEnter","onClick","_c","$RefreshReg$"],"sources":["/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/component/PromptInput.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextInput from \"./TextInput\";\nimport TextArea from \"./TextArea\";\nimport Button from \"./Button\";\n\nfunction PromptInput() {\n  const [question, setQuestion] = useState(\"\");\n  const [conversation, setConversation] = useState(\"\");\n  const [ws, setWs] = useState(null);\n  const [isTyping, setIsTyping] = useState(false); // Track if AI is typing\n  const [aiResponse, setAiResponse] = useState(\"\"); // Track AI response being typed\n  // const Spinner = () => <div className=\"spinner\"></div>;\n\n  const ThinkingAnimation = () => (\n    <div className=\"thinking\">\n      Llama is thinking\n      <span className=\"dot\"></span>\n      <span className=\"dot\"></span>\n      <span className=\"dot\"></span>\n    </div>\n  );\n\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:4000\");\n    setWs(socket);\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.response) {\n        displayResponseLetterByLetter(data.response);\n      } else {\n        console.error(\"Unexpected response format:\", data);\n      }\n    };\n\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  const handleInputChange = (e) => {\n    setQuestion(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (question.trim() === \"\" || !ws) return;\n\n    setConversation((prev) => `${prev}\\nYou: ${question}`);\n    setAiResponse(\"\");\n    setIsTyping(true); // Start spinner\n\n    const message = {\n      model: \"llama3:8b\",\n      prompt: conversation + `\\nYou: ${question}`,\n      stream: false,\n    };\n\n    ws.send(JSON.stringify(message));\n    setQuestion(\"\"); // Clear input after sending\n  };\n\n  const displayResponseLetterByLetter = (response) => {\n    setIsTyping(true); // Keep spinner active while typing effect is ongoing\n    let currentText = \"\";\n    const delay = 20;\n\n    response.split(\"\").forEach((char, index) => {\n      setTimeout(() => {\n        currentText += char;\n        setAiResponse(currentText);\n\n        if (index === response.length - 1) {\n          setIsTyping(false); // Stop spinner when response is complete\n          setConversation((prev) => `${prev}\\nLlama: ${currentText}`);\n          setAiResponse(\"\");\n        }\n      }, index * delay);\n    });\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <h1>Alsurance - Own Your Prompts</h1>\n      <TextArea\n        value={`${conversation}${isTyping ? `\\nLlama: ${aiResponse}` : \"\"}`}\n        placeholder=\"The AI response will appear here.\"\n      />\n      {isTyping && <ThinkingAnimation />}{\" \"}\n      {/* Show thinking animation while waiting */}\n      <TextInput\n        value={question}\n        onChange={handleInputChange}\n        onEnter={handleSendMessage}\n      />\n      <Button onClick={handleSendMessage} />\n    </div>\n  );\n}\n\nexport default PromptInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}