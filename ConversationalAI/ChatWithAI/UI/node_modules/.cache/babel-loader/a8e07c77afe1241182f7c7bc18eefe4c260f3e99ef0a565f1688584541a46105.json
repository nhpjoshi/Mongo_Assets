{"ast":null,"code":"var _jsxFileName = \"/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport TextInput from \"./component/TextInput\"; // Ensure this matches your folder structure\nimport ChatHistory from \"./component/ChatHistory\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport { generateSessionId } from \"./utils/session\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [question, setQuestion] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(\"\");\n  const [saveResponse, setSaveResponse] = useState(\"\");\n  const [transactionHash, setTransactionHash] = useState(\"\"); // State for transaction hash\n  const [pollingIntervalId, setPollingIntervalId] = useState(null); // To manage polling\n  const [attempts, setAttempts] = useState(0); // Track polling attempts\n  const [isTyping, setIsTyping] = useState(false); // Track if AI is typing\n\n  useEffect(() => {\n    const id = generateSessionId();\n    setSessionId(id);\n    localStorage.setItem(\"sessionId\", id);\n  }, []);\n  const handleInputChange = event => {\n    setQuestion(event.target.value);\n  };\n  const handleButtonClick = async () => {\n    if (!question.trim()) return;\n    setMessages(prevMessages => [...prevMessages, {\n      type: \"user\",\n      text: question\n    }]);\n    setQuestion(\"\");\n    try {\n      const response = await fetch(\"http://localhost:3009/api/generate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          question\n        })\n      });\n      const data = await response.json();\n\n      // Type the response letter by letter\n      setIsTyping(true);\n      let currentText = \"\";\n      const responseText = data.response;\n      for (let i = 0; i < responseText.length; i++) {\n        currentText += responseText[i];\n        await new Promise(resolve => setTimeout(resolve, 50)); // Delay for typing effect\n        setMessages(prevMessages => [...prevMessages.slice(0, -1), {\n          type: \"AI\",\n          text: currentText\n        }]);\n      }\n      setIsTyping(false); // Typing completed\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setMessages(prevMessages => [...prevMessages, {\n        type: \"AI\",\n        text: \"An error occurred while generating the response.\"\n      }]);\n    } finally {\n      const chatHistory = document.querySelector(\".chat-history\");\n      chatHistory.scrollTop = chatHistory.scrollHeight;\n    }\n  };\n  const handleSaveConversation = async () => {\n    const conversationContent = messages.map(msg => `${msg.type}: ${msg.text}`).join(\"\\n\");\n    const payload = {\n      sessionId,\n      conversation: JSON.stringify(conversationContent),\n      statusFlag: true\n    };\n    try {\n      const response = await fetch(\"http://localhost:3009/api/save-input\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const data = await response.json();\n      setSaveResponse(data.message || \"Conversation saved successfully!\");\n\n      // Start polling for the transaction hash\n      startPollingForTransactionHash();\n    } catch (error) {\n      console.error(\"Error saving conversation to MongoDB:\", error);\n      setSaveResponse(\"An error occurred while saving the conversation.\");\n    }\n  };\n  const fetchTransactionHash = async () => {\n    try {\n      const response = await fetch(`http://localhost:3011/api/get-transaction-hash/${sessionId}`);\n      const data = await response.json();\n      if (data.transactionHash) {\n        setTransactionHash(data.transactionHash); // Set the transaction hash\n        clearInterval(pollingIntervalId); // Stop polling once hash is found\n      } else {\n        setAttempts(prevAttempts => prevAttempts + 1); // Increment attempt count\n        if (attempts >= 2) {\n          // Stop after 3 attempts\n          clearInterval(pollingIntervalId);\n          setSaveResponse(\"Failed to retrieve transaction hash after 3 attempts.\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching transaction hash:\", error);\n      setAttempts(prevAttempts => prevAttempts + 1);\n      if (attempts >= 2) {\n        clearInterval(pollingIntervalId);\n        setSaveResponse(\"Failed to retrieve transaction hash after 3 attempts.\");\n      }\n    }\n  };\n  const startPollingForTransactionHash = () => {\n    setAttempts(0); // Reset attempts\n    if (!pollingIntervalId) {\n      const intervalId = setInterval(fetchTransactionHash, 5000);\n      setPollingIntervalId(intervalId);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AIsurance - Own Your Prompts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatHistory, {\n      messages: messages,\n      isTyping: isTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      value: question,\n      onChange: handleInputChange,\n      onEnter: handleButtonClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-secondary mt-3\",\n      onClick: handleSaveConversation,\n      children: \"Own Your Creation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), saveResponse && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-3\",\n      children: saveResponse\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 24\n    }, this), transactionHash && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-3\",\n      children: [\"Transaction Hash: \", transactionHash]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OFBVzsh1aM6tmMhuVjStgN1cjHU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","TextInput","ChatHistory","generateSessionId","jsxDEV","_jsxDEV","App","_s","question","setQuestion","messages","setMessages","sessionId","setSessionId","saveResponse","setSaveResponse","transactionHash","setTransactionHash","pollingIntervalId","setPollingIntervalId","attempts","setAttempts","isTyping","setIsTyping","id","localStorage","setItem","handleInputChange","event","target","value","handleButtonClick","trim","prevMessages","type","text","response","fetch","method","headers","body","JSON","stringify","data","json","currentText","responseText","i","length","Promise","resolve","setTimeout","slice","error","console","chatHistory","document","querySelector","scrollTop","scrollHeight","handleSaveConversation","conversationContent","map","msg","join","payload","conversation","statusFlag","message","startPollingForTransactionHash","fetchTransactionHash","clearInterval","prevAttempts","intervalId","setInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onEnter","onClick","_c","$RefreshReg$"],"sources":["/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TextInput from \"./component/TextInput\"; // Ensure this matches your folder structure\nimport ChatHistory from \"./component/ChatHistory\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport { generateSessionId } from \"./utils/session\";\n\nfunction App() {\n  const [question, setQuestion] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(\"\");\n  const [saveResponse, setSaveResponse] = useState(\"\");\n  const [transactionHash, setTransactionHash] = useState(\"\"); // State for transaction hash\n  const [pollingIntervalId, setPollingIntervalId] = useState(null); // To manage polling\n  const [attempts, setAttempts] = useState(0); // Track polling attempts\n  const [isTyping, setIsTyping] = useState(false); // Track if AI is typing\n\n  useEffect(() => {\n    const id = generateSessionId();\n    setSessionId(id);\n    localStorage.setItem(\"sessionId\", id);\n  }, []);\n\n  const handleInputChange = (event) => {\n    setQuestion(event.target.value);\n  };\n\n  const handleButtonClick = async () => {\n    if (!question.trim()) return;\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { type: \"user\", text: question },\n    ]);\n    setQuestion(\"\");\n\n    try {\n      const response = await fetch(\"http://localhost:3009/api/generate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ sessionId, question }),\n      });\n      const data = await response.json();\n\n      // Type the response letter by letter\n      setIsTyping(true);\n      let currentText = \"\";\n      const responseText = data.response;\n      for (let i = 0; i < responseText.length; i++) {\n        currentText += responseText[i];\n        await new Promise((resolve) => setTimeout(resolve, 50)); // Delay for typing effect\n        setMessages((prevMessages) => [\n          ...prevMessages.slice(0, -1),\n          { type: \"AI\", text: currentText },\n        ]);\n      }\n      setIsTyping(false); // Typing completed\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          type: \"AI\",\n          text: \"An error occurred while generating the response.\",\n        },\n      ]);\n    } finally {\n      const chatHistory = document.querySelector(\".chat-history\");\n      chatHistory.scrollTop = chatHistory.scrollHeight;\n    }\n  };\n\n  const handleSaveConversation = async () => {\n    const conversationContent = messages\n      .map((msg) => `${msg.type}: ${msg.text}`)\n      .join(\"\\n\");\n    const payload = {\n      sessionId,\n      conversation: JSON.stringify(conversationContent),\n      statusFlag: true,\n    };\n\n    try {\n      const response = await fetch(\"http://localhost:3009/api/save-input\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      });\n      const data = await response.json();\n\n      setSaveResponse(data.message || \"Conversation saved successfully!\");\n\n      // Start polling for the transaction hash\n      startPollingForTransactionHash();\n    } catch (error) {\n      console.error(\"Error saving conversation to MongoDB:\", error);\n      setSaveResponse(\"An error occurred while saving the conversation.\");\n    }\n  };\n\n  const fetchTransactionHash = async () => {\n    try {\n      const response = await fetch(\n        `http://localhost:3011/api/get-transaction-hash/${sessionId}`\n      );\n      const data = await response.json();\n\n      if (data.transactionHash) {\n        setTransactionHash(data.transactionHash); // Set the transaction hash\n        clearInterval(pollingIntervalId); // Stop polling once hash is found\n      } else {\n        setAttempts((prevAttempts) => prevAttempts + 1); // Increment attempt count\n        if (attempts >= 2) {\n          // Stop after 3 attempts\n          clearInterval(pollingIntervalId);\n          setSaveResponse(\n            \"Failed to retrieve transaction hash after 3 attempts.\"\n          );\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching transaction hash:\", error);\n      setAttempts((prevAttempts) => prevAttempts + 1);\n      if (attempts >= 2) {\n        clearInterval(pollingIntervalId);\n        setSaveResponse(\n          \"Failed to retrieve transaction hash after 3 attempts.\"\n        );\n      }\n    }\n  };\n\n  const startPollingForTransactionHash = () => {\n    setAttempts(0); // Reset attempts\n    if (!pollingIntervalId) {\n      const intervalId = setInterval(fetchTransactionHash, 5000);\n      setPollingIntervalId(intervalId);\n    }\n  };\n\n  return (\n    <div className=\"App container mt-5\">\n      <h1>AIsurance - Own Your Prompts</h1>\n      <ChatHistory messages={messages} isTyping={isTyping} />\n      <br />\n      <TextInput\n        value={question}\n        onChange={handleInputChange}\n        onEnter={handleButtonClick}\n      />\n      <br />\n      <button\n        className=\"btn btn-secondary mt-3\"\n        onClick={handleSaveConversation}\n      >\n        Own Your Creation\n      </button>\n      {/* Display API response message below the button */}\n      {saveResponse && <p className=\"mt-3\">{saveResponse}</p>}\n      {/* Display the transaction hash below the response */}\n      {transactionHash && (\n        <p className=\"mt-3\">Transaction Hash: {transactionHash}</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}