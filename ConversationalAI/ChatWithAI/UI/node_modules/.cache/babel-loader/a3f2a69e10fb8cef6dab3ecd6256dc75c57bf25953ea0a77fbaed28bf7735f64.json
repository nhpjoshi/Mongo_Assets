{"ast":null,"code":"var _jsxFileName = \"/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/component/PromptInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TextInput from \"./TextInput\";\nimport TextArea from \"./TextArea\";\nimport Button from \"./Button\";\nimport \"./PromptInput.css\"; // Import the CSS file for animations\nimport { generateSessionId } from \"../utils/session\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PromptInput() {\n  _s();\n  const [question, setQuestion] = useState(\"\");\n  const [conversation, setConversation] = useState(\"\"); // Start with an empty string\n  const [ws, setWs] = useState(null);\n  const [saveResponse, setSaveResponse] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(\"\");\n  const [isThinking, setIsThinking] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [showGotIt, setShowGotIt] = useState(false);\n  useEffect(() => {\n    const id = generateSessionId();\n    setSessionId(id);\n    localStorage.setItem(\"sessionId\", id);\n  }, []);\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:4000\");\n    setWs(socket);\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.response) {\n        setShowGotIt(true);\n        setTimeout(() => setShowGotIt(false), 1000);\n        displayResponseLetterByLetter(data.response);\n      } else {\n        console.error(\"Unexpected response format:\", data);\n      }\n    };\n    return () => {\n      socket.close();\n    };\n  }, []);\n  const handleInputChange = e => {\n    setQuestion(e.target.value);\n  };\n  const handleButtonClick = async () => {\n    if (!question.trim()) return;\n    setMessages(prevMessages => [...prevMessages, {\n      type: \"user\",\n      text: question\n    }]);\n    setQuestion(\"\");\n    try {\n      const response = await fetch(\"http://localhost:3009/api/generate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          question\n        })\n      });\n      const data = await response.json();\n      setMessages(prevMessages => [...prevMessages, {\n        type: \"AI\",\n        text: data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setMessages(prevMessages => [...prevMessages, {\n        type: \"AI\",\n        text: \"An error occurred while generating the response.\"\n      }]);\n    } finally {\n      const chatHistory = document.querySelector(\".chat-history\");\n      chatHistory.scrollTop = chatHistory.scrollHeight;\n    }\n  };\n  const handleSaveConversation = async () => {\n    const conversationContent = messages.map(msg => `${msg.type}: ${msg.text}`).join(\"\\n\");\n    const payload = {\n      sessionId,\n      conversation: JSON.stringify(conversationContent),\n      Flag: true\n    };\n    try {\n      const response = await fetch(\"http://localhost:3011/api/save-input\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      const data = await response.json();\n      setSaveResponse(data.message || \"Conversation saved successfully!\");\n\n      // Start polling for the transaction hash\n      //startPollingForTransactionHash();\n    } catch (error) {\n      console.error(\"Error saving conversation to MongoDB:\", error);\n      setSaveResponse(\"An error occurred while saving the conversation.\");\n    }\n  };\n  const handleSendMessage = () => {\n    if (question.trim() === \"\" || !ws) return;\n\n    // Check if the user entered \"clear\" command\n    if (question.toLowerCase() === \"clear\") {\n      setConversation(\"\"); // Clear the conversation\n      setQuestion(\"\"); // Reset the input field\n      return; // Exit early\n    }\n\n    // Adding a partition (separator) before adding the new user input\n    setConversation(prev => prev ? `${prev}\\n------------------\\nYou: ${question}` : `You: ${question}`);\n    setAiResponse(\"\");\n    setIsThinking(true);\n    const message = {\n      model: \"llama3:8b\",\n      prompt: conversation + `\\nYou: ${question}`,\n      stream: false\n    };\n    ws.send(JSON.stringify(message));\n    setQuestion(\"\");\n  };\n  const displayResponseLetterByLetter = response => {\n    setIsThinking(false);\n    setIsTyping(true);\n    let currentText = \"\";\n    const delay = 10;\n    response.split(\"\").forEach((char, index) => {\n      setTimeout(() => {\n        currentText += char;\n        setAiResponse(currentText);\n        if (index === response.length - 1) {\n          setIsTyping(false);\n          // Adding a partition (separator) after the AI response\n          setConversation(prev => `${prev}\\nAI: ${currentText}`);\n          setAiResponse(\"\");\n        }\n      }, index * delay);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Alsurance - Own Your Prompts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n      value: `${conversation}${isTyping ? `\\nAI: ${aiResponse}` : \"\"}`,\n      placeholder: \"The AI response will appear here.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), showGotIt && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"green\",\n        marginTop: \"10px\"\n      },\n      children: \"Got it!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), isThinking && !showGotIt && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thinking-animation\",\n      children: [\"Thinking\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-animation\",\n      children: [\"Typing\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      value: question,\n      onChange: handleInputChange,\n      onEnter: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-secondary mt-3\",\n      onClick: handleSaveConversation,\n      children: \"Own Your Creation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(PromptInput, \"iW50xWqtgb2OYMIaiKIzf5EXsEU=\");\n_c = PromptInput;\nexport default PromptInput;\nvar _c;\n$RefreshReg$(_c, \"PromptInput\");","map":{"version":3,"names":["React","useState","useEffect","TextInput","TextArea","Button","generateSessionId","jsxDEV","_jsxDEV","PromptInput","_s","question","setQuestion","conversation","setConversation","ws","setWs","saveResponse","setSaveResponse","messages","setMessages","sessionId","setSessionId","isThinking","setIsThinking","isTyping","setIsTyping","aiResponse","setAiResponse","showGotIt","setShowGotIt","id","localStorage","setItem","socket","WebSocket","onmessage","event","data","JSON","parse","response","setTimeout","displayResponseLetterByLetter","console","error","close","handleInputChange","e","target","value","handleButtonClick","trim","prevMessages","type","text","fetch","method","headers","body","stringify","json","chatHistory","document","querySelector","scrollTop","scrollHeight","handleSaveConversation","conversationContent","map","msg","join","payload","Flag","message","handleSendMessage","toLowerCase","prev","model","prompt","stream","send","currentText","delay","split","forEach","char","index","length","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","color","className","onChange","onEnter","onClick","_c","$RefreshReg$"],"sources":["/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/component/PromptInput.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextInput from \"./TextInput\";\nimport TextArea from \"./TextArea\";\nimport Button from \"./Button\";\nimport \"./PromptInput.css\"; // Import the CSS file for animations\nimport { generateSessionId } from \"../utils/session\";\nfunction PromptInput() {\n  const [question, setQuestion] = useState(\"\");\n  const [conversation, setConversation] = useState(\"\"); // Start with an empty string\n  const [ws, setWs] = useState(null);\n  const [saveResponse, setSaveResponse] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(\"\");\n  const [isThinking, setIsThinking] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [aiResponse, setAiResponse] = useState(\"\");\n  const [showGotIt, setShowGotIt] = useState(false);\n\n  useEffect(() => {\n    const id = generateSessionId();\n    setSessionId(id);\n    localStorage.setItem(\"sessionId\", id);\n  }, []);\n\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:4000\");\n    setWs(socket);\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.response) {\n        setShowGotIt(true);\n        setTimeout(() => setShowGotIt(false), 1000);\n        displayResponseLetterByLetter(data.response);\n      } else {\n        console.error(\"Unexpected response format:\", data);\n      }\n    };\n\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  const handleInputChange = (e) => {\n    setQuestion(e.target.value);\n  };\n\n  const handleButtonClick = async () => {\n    if (!question.trim()) return;\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { type: \"user\", text: question },\n    ]);\n    setQuestion(\"\");\n\n    try {\n      const response = await fetch(\"http://localhost:3009/api/generate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ sessionId, question }),\n      });\n      const data = await response.json();\n\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { type: \"AI\", text: data.response },\n      ]);\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          type: \"AI\",\n          text: \"An error occurred while generating the response.\",\n        },\n      ]);\n    } finally {\n      const chatHistory = document.querySelector(\".chat-history\");\n      chatHistory.scrollTop = chatHistory.scrollHeight;\n    }\n  };\n  const handleSaveConversation = async () => {\n    const conversationContent = messages\n      .map((msg) => `${msg.type}: ${msg.text}`)\n      .join(\"\\n\");\n    const payload = {\n      sessionId,\n      conversation: JSON.stringify(conversationContent),\n      Flag: true,\n    };\n    try {\n      const response = await fetch(\"http://localhost:3011/api/save-input\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      });\n      const data = await response.json();\n\n      setSaveResponse(data.message || \"Conversation saved successfully!\");\n\n      // Start polling for the transaction hash\n      //startPollingForTransactionHash();\n    } catch (error) {\n      console.error(\"Error saving conversation to MongoDB:\", error);\n      setSaveResponse(\"An error occurred while saving the conversation.\");\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (question.trim() === \"\" || !ws) return;\n\n    // Check if the user entered \"clear\" command\n    if (question.toLowerCase() === \"clear\") {\n      setConversation(\"\"); // Clear the conversation\n      setQuestion(\"\"); // Reset the input field\n      return; // Exit early\n    }\n\n    // Adding a partition (separator) before adding the new user input\n    setConversation((prev) =>\n      prev\n        ? `${prev}\\n------------------\\nYou: ${question}`\n        : `You: ${question}`\n    );\n    setAiResponse(\"\");\n    setIsThinking(true);\n\n    const message = {\n      model: \"llama3:8b\",\n      prompt: conversation + `\\nYou: ${question}`,\n      stream: false,\n    };\n\n    ws.send(JSON.stringify(message));\n    setQuestion(\"\");\n  };\n\n  const displayResponseLetterByLetter = (response) => {\n    setIsThinking(false);\n    setIsTyping(true);\n\n    let currentText = \"\";\n    const delay = 10;\n\n    response.split(\"\").forEach((char, index) => {\n      setTimeout(() => {\n        currentText += char;\n        setAiResponse(currentText);\n\n        if (index === response.length - 1) {\n          setIsTyping(false);\n          // Adding a partition (separator) after the AI response\n          setConversation((prev) => `${prev}\\nAI: ${currentText}`);\n          setAiResponse(\"\");\n        }\n      }, index * delay);\n    });\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <h1>Alsurance - Own Your Prompts</h1>\n      <TextArea\n        value={`${conversation}${isTyping ? `\\nAI: ${aiResponse}` : \"\"}`}\n        placeholder=\"The AI response will appear here.\"\n      />\n      {showGotIt && (\n        <div style={{ color: \"green\", marginTop: \"10px\" }}>Got it!</div>\n      )}\n      {isThinking && !showGotIt && (\n        <div className=\"thinking-animation\">\n          Thinking<span className=\"dot\"></span>\n          <span className=\"dot\"></span>\n          <span className=\"dot\"></span>\n        </div>\n      )}\n      {isTyping && (\n        <div className=\"typing-animation\">\n          Typing<span className=\"dot\"></span>\n          <span className=\"dot\"></span>\n          <span className=\"dot\"></span>\n        </div>\n      )}\n      <TextInput\n        value={question}\n        onChange={handleInputChange}\n        onEnter={handleSendMessage}\n      />\n      <button\n        className=\"btn btn-secondary mt-3\"\n        onClick={handleSaveConversation}\n      >\n        Own Your Creation\n      </button>\n    </div>\n  );\n}\n\nexport default PromptInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}