{"ast":null,"code":"const express = require(\"express\");\nconst {\n  MongoClient,\n  ObjectId\n} = require(\"mongodb\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst cors = require(\"cors\");\nconst app = express();\nconst port = 4012;\n\n// MongoDB connection URI and database details\nconst mongoURI = \"mongodb+srv://AdminCluster:admin@cluster0.n2msm.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\";\nconst client = new MongoClient(mongoURI);\napp.use(express.json());\n\n// Enable CORS and allow 'null' origin for file:// requests\napp.use(cors({\n  origin: \"http://localhost:3002\",\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n  // specify allowed methods as needed\n  allowedHeaders: [\"Content-Type\", \"Authorization\"] // specify allowed headers if needed\n}));\n\n// Connect to MongoDB\nasync function connectToDB() {\n  try {\n    await client.connect();\n    console.log(\"Connected to MongoDB.\");\n  } catch (err) {\n    console.error(\"MongoDB connection error:\", err);\n  }\n}\nconnectToDB();\n\n// API to download conversation file by sessionId\napp.get(\"/api/download-conversation/:sessionId\", async (req, res) => {\n  const {\n    sessionId\n  } = req.params;\n\n  // Validate that sessionId is provided (and optionally, check format)\n  if (!sessionId) {\n    return res.status(400).send(\"Session ID is required.\");\n  }\n  try {\n    const db = client.db(\"Aisurance\");\n    const collection = db.collection(\"BlockchainTx\");\n\n    // Find document by sessionId (not ObjectId)\n    const document = await collection.findOne({\n      sessionId: sessionId\n    });\n    if (!document) {\n      return res.status(404).send(\"Conversation not found.\");\n    }\n    const conversationContent = document.input || \"No conversation available.\";\n\n    // Set the appropriate headers for file download\n    res.setHeader(\"Content-Disposition\", `attachment; filename=conversation_${sessionId}.txt`);\n    res.setHeader(\"Content-Type\", \"text/plain\");\n\n    // Send the content as the response body\n    res.send(conversationContent);\n  } catch (error) {\n    console.error(\"Error fetching conversation:\", error);\n    res.status(500).send(\"Internal Server Error\");\n  }\n});\n\n// Start server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","MongoClient","ObjectId","fs","path","cors","app","port","mongoURI","client","use","json","origin","methods","allowedHeaders","connectToDB","connect","console","log","err","error","get","req","res","sessionId","params","status","send","db","collection","document","findOne","conversationContent","input","setHeader","listen"],"sources":["/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/component/ConversationTable.js"],"sourcesContent":["const express = require(\"express\");\nconst { MongoClient, ObjectId } = require(\"mongodb\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst cors = require(\"cors\");\n\nconst app = express();\nconst port = 4012;\n\n// MongoDB connection URI and database details\nconst mongoURI =\n  \"mongodb+srv://AdminCluster:admin@cluster0.n2msm.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\";\nconst client = new MongoClient(mongoURI);\n\napp.use(express.json());\n\n// Enable CORS and allow 'null' origin for file:// requests\napp.use(\n  cors({\n    origin: \"http://localhost:3002\",\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"], // specify allowed methods as needed\n    allowedHeaders: [\"Content-Type\", \"Authorization\"], // specify allowed headers if needed\n  })\n);\n\n// Connect to MongoDB\nasync function connectToDB() {\n  try {\n    await client.connect();\n    console.log(\"Connected to MongoDB.\");\n  } catch (err) {\n    console.error(\"MongoDB connection error:\", err);\n  }\n}\nconnectToDB();\n\n// API to download conversation file by sessionId\napp.get(\"/api/download-conversation/:sessionId\", async (req, res) => {\n  const { sessionId } = req.params;\n\n  // Validate that sessionId is provided (and optionally, check format)\n  if (!sessionId) {\n    return res.status(400).send(\"Session ID is required.\");\n  }\n\n  try {\n    const db = client.db(\"Aisurance\");\n    const collection = db.collection(\"BlockchainTx\");\n\n    // Find document by sessionId (not ObjectId)\n    const document = await collection.findOne({ sessionId: sessionId });\n\n    if (!document) {\n      return res.status(404).send(\"Conversation not found.\");\n    }\n\n    const conversationContent = document.input || \"No conversation available.\";\n\n    // Set the appropriate headers for file download\n    res.setHeader(\n      \"Content-Disposition\",\n      `attachment; filename=conversation_${sessionId}.txt`\n    );\n    res.setHeader(\"Content-Type\", \"text/plain\");\n\n    // Send the content as the response body\n    res.send(conversationContent);\n  } catch (error) {\n    console.error(\"Error fetching conversation:\", error);\n    res.status(500).send(\"Internal Server Error\");\n  }\n});\n\n// Start server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC,WAAW;EAAEC;AAAS,CAAC,GAAGF,OAAO,CAAC,SAAS,CAAC;AACpD,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMK,IAAI,GAAGL,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMM,GAAG,GAAGP,OAAO,CAAC,CAAC;AACrB,MAAMQ,IAAI,GAAG,IAAI;;AAEjB;AACA,MAAMC,QAAQ,GACZ,2GAA2G;AAC7G,MAAMC,MAAM,GAAG,IAAIR,WAAW,CAACO,QAAQ,CAAC;AAExCF,GAAG,CAACI,GAAG,CAACX,OAAO,CAACY,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAL,GAAG,CAACI,GAAG,CACLL,IAAI,CAAC;EACHO,MAAM,EAAE,uBAAuB;EAC/BC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;EAAE;EAC3CC,cAAc,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC,CAAE;AACrD,CAAC,CACH,CAAC;;AAED;AACA,eAAeC,WAAWA,CAAA,EAAG;EAC3B,IAAI;IACF,MAAMN,MAAM,CAACO,OAAO,CAAC,CAAC;IACtBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZF,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC;EACjD;AACF;AACAJ,WAAW,CAAC,CAAC;;AAEb;AACAT,GAAG,CAACe,GAAG,CAAC,uCAAuC,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnE,MAAM;IAAEC;EAAU,CAAC,GAAGF,GAAG,CAACG,MAAM;;EAEhC;EACA,IAAI,CAACD,SAAS,EAAE;IACd,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,yBAAyB,CAAC;EACxD;EAEA,IAAI;IACF,MAAMC,EAAE,GAAGnB,MAAM,CAACmB,EAAE,CAAC,WAAW,CAAC;IACjC,MAAMC,UAAU,GAAGD,EAAE,CAACC,UAAU,CAAC,cAAc,CAAC;;IAEhD;IACA,MAAMC,QAAQ,GAAG,MAAMD,UAAU,CAACE,OAAO,CAAC;MAAEP,SAAS,EAAEA;IAAU,CAAC,CAAC;IAEnE,IAAI,CAACM,QAAQ,EAAE;MACb,OAAOP,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,yBAAyB,CAAC;IACxD;IAEA,MAAMK,mBAAmB,GAAGF,QAAQ,CAACG,KAAK,IAAI,4BAA4B;;IAE1E;IACAV,GAAG,CAACW,SAAS,CACX,qBAAqB,EACrB,qCAAqCV,SAAS,MAChD,CAAC;IACDD,GAAG,CAACW,SAAS,CAAC,cAAc,EAAE,YAAY,CAAC;;IAE3C;IACAX,GAAG,CAACI,IAAI,CAACK,mBAAmB,CAAC;EAC/B,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpDG,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;EAC/C;AACF,CAAC,CAAC;;AAEF;AACArB,GAAG,CAAC6B,MAAM,CAAC5B,IAAI,EAAE,MAAM;EACrBU,OAAO,CAACC,GAAG,CAAC,sCAAsCX,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}