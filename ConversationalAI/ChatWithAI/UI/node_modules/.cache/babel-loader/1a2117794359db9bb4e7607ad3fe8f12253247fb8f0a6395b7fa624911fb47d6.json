{"ast":null,"code":"var _jsxFileName = \"/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/component/PromptInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TextInput from \"./TextInput\";\nimport TextArea from \"./TextArea\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PromptInput() {\n  _s();\n  const [question, setQuestion] = useState(\"\");\n  const [conversation, setConversation] = useState(\"\");\n  const [ws, setWs] = useState(null);\n  const [isTyping, setIsTyping] = useState(false); // Track if AI is typing\n\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:4000\");\n    setWs(socket);\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.response) {\n        displayResponseLetterByLetter(data.response);\n      } else {\n        console.error(\"Unexpected response format:\", data);\n      }\n    };\n    return () => {\n      socket.close();\n    };\n  }, []);\n  const handleInputChange = e => {\n    setQuestion(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (question.trim() === \"\" || !ws) return;\n    setConversation(prev => `${prev}\\nUser: ${question}`);\n    const message = {\n      model: \"llama3:8b\",\n      prompt: conversation + `\\nUser: ${question}`,\n      stream: false\n    };\n    ws.send(JSON.stringify(message));\n    setQuestion(\"\");\n  };\n  const displayResponseLetterByLetter = response => {\n    setIsTyping(true); // Start typing effect\n    let currentText = \"\";\n    const delay = 50; // Delay in ms for each letter\n\n    response.split(\"\").forEach((char, index) => {\n      setTimeout(() => {\n        currentText += char;\n        setConversation(prev => `${prev}\\nLlama: ${currentText}`);\n\n        // Stop typing effect at the end of the response\n        if (index === response.length - 1) {\n          setIsTyping(false);\n        }\n      }, index * delay);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Alsurance - Own Your Prompts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n      value: conversation,\n      placeholder: \"The AI response will appear here.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      value: question,\n      onChange: handleInputChange,\n      onEnter: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(PromptInput, \"rB0amaH+4L6Zdn/7voo13U7P6uo=\");\n_c = PromptInput;\nexport default PromptInput;\nvar _c;\n$RefreshReg$(_c, \"PromptInput\");","map":{"version":3,"names":["React","useState","useEffect","TextInput","TextArea","Button","jsxDEV","_jsxDEV","PromptInput","_s","question","setQuestion","conversation","setConversation","ws","setWs","isTyping","setIsTyping","socket","WebSocket","onmessage","event","data","JSON","parse","response","displayResponseLetterByLetter","console","error","close","handleInputChange","e","target","value","handleSendMessage","trim","prev","message","model","prompt","stream","send","stringify","currentText","delay","split","forEach","char","index","setTimeout","length","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onEnter","onClick","_c","$RefreshReg$"],"sources":["/Users/nitish.joshi/Documents/GitHub/Mongo_Assets/TestConAI/ServerCode/UI/llama-client/src/component/PromptInput.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TextInput from \"./TextInput\";\nimport TextArea from \"./TextArea\";\nimport Button from \"./Button\";\n\nfunction PromptInput() {\n  const [question, setQuestion] = useState(\"\");\n  const [conversation, setConversation] = useState(\"\");\n  const [ws, setWs] = useState(null);\n  const [isTyping, setIsTyping] = useState(false); // Track if AI is typing\n\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:4000\");\n    setWs(socket);\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.response) {\n        displayResponseLetterByLetter(data.response);\n      } else {\n        console.error(\"Unexpected response format:\", data);\n      }\n    };\n\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  const handleInputChange = (e) => {\n    setQuestion(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (question.trim() === \"\" || !ws) return;\n\n    setConversation((prev) => `${prev}\\nUser: ${question}`);\n\n    const message = {\n      model: \"llama3:8b\",\n      prompt: conversation + `\\nUser: ${question}`,\n      stream: false,\n    };\n\n    ws.send(JSON.stringify(message));\n    setQuestion(\"\");\n  };\n\n  const displayResponseLetterByLetter = (response) => {\n    setIsTyping(true); // Start typing effect\n    let currentText = \"\";\n    const delay = 50; // Delay in ms for each letter\n\n    response.split(\"\").forEach((char, index) => {\n      setTimeout(() => {\n        currentText += char;\n        setConversation((prev) => `${prev}\\nLlama: ${currentText}`);\n\n        // Stop typing effect at the end of the response\n        if (index === response.length - 1) {\n          setIsTyping(false);\n        }\n      }, index * delay);\n    });\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n      <h1>Alsurance - Own Your Prompts</h1>\n      <TextArea\n        value={conversation}\n        placeholder=\"The AI response will appear here.\"\n      />\n      <TextInput\n        value={question}\n        onChange={handleInputChange}\n        onEnter={handleSendMessage}\n      />\n      <Button onClick={handleSendMessage} />\n    </div>\n  );\n}\n\nexport default PromptInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}